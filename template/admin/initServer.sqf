// Do not Edit this file.

// Get weekday for start times
tac_getWeekDay = {
    params ["_date"];

    // Keep only year, month, day if longer date format is given
    _date = [_date select 0, _date select 1, _date select 2, 0, 0];

    private _yearBefore = ((_date select 0) - 1) max 0;
    private _leapYears = floor (_yearBefore / 4);
    private _normalYears = _yearBefore - _leapYears;
    private _days = _normalYears + (_leapYears * (366 / 365)) + dateToNumber _date;

    (round (_days / (1 / 365))) mod 7  // return
};

// Mathematical Heresy
systemTimeUTC params ["", "", "", "_hour", "_minute"];
private _weekDay = [systemTimeUTC] call tac_getWeekDay;
private _startTime = [15, 14] select (_weekDay == 5); // 1400z on Saturday, 1500z otherwise
private _timeUntilStart = ((_startTime * 60) - (_hour * 60 + _minute)) * 60; // start time - current time = time until start time
_timeUntilStart = _timeUntilStart max 0;

//diag_log format ["[TAC] Time Until Start: %1", _timeUntilStart];

// Mission end function
private _endAAR = {
    private _missionType = getMissionConfigValue ["tac_type", ""];
    private _missionTypeString = ["Contract", "Non-Contract", "Training", "Special", "PvP"] select _missionType;
    //diag_log format ["[TAC] Mission Type: %1", _missionType];
    //diag_log format ["[TAC] Mission Type String: %1", _missionTypeString];
    ["", "", _missionTypeString] call ocap_fnc_exportData;
};

// Handle mission ending
addMissionEventHandler ["MpEnded", _endAAR];

if (_missionType != 5) then { // Handle Contract/Non-Contracts
    [{
        params ["_endAAR"];
        [{
            params ["_args", "_handle"];
            _args params ["_endAAR"];
            private _playerCount = call CBA_fnc_players;

            if (!ocap_capture && {_playerCount >= 5}) then {
                [] call ocap_fnc_init;
            };

            if (ocap_capture && {_playerCount < 5}) then {
                call _endAAR
            };
        }, 60, [_endAAR]] call CBA_fnc_addPerFrameHandler;
    }, [_endAAR], _timeUntilStart] call CBA_fnc_waitAndExecute;
};

// AAR Events for chat commands
[QGVAR(captureAAR), {
    [] call ocap_fnc_init;
}] call CBA_fnc_addEventHandler;

[QGVAR(saveAAR), {
    [] call ocap_fnc_exportData;
}] call CBA_fnc_addEventHandler;

// Mission Name call on mission start
[{
    [QGVAR(missionName), []] call CBA_fnc_globalEvent;
}, [], _timeUntilStart + 60] call CBA_fnc_waitAndExecute;

// Log given traits to RPT 70 minutes after mission start if apollo is enabled.
if (TACGVAR(apollo,enabled)) then {
    [{
        private _playerTraits = [];
        {
            _playerTraits pushBack [_x, _y];
        } forEach TACGVAR(supplies,playerTraits);
        INFO_1("Player Traits: %1",_playerTraits); // For now just logging to RPT, future uses TBD.
    }, [], _timeUntilStart + 10*60] call CBA_fnc_waitAndExecute;
};

// Unit Counter Tool - Target Watch: `call TAC_Scripts_fnc_monitorUnits`
FUNC(monitorUnits) = {
    format ["West: %1|East: %2|Indep: %3|Civ: %4|Player: %5", west countSide allUnits, east countSide allUnits, resistance countside allUnits, civilian countSide allUnits, count playableUnits]
};
